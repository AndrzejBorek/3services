version: '3.8'

services:
  redis-service2:
    image: redis:${REDIS_IMAGE_TAG}
    ports:
      - "${REDIS_HOST_PORT}:${REDIS_CONTAINER_PORT}"
    networks:
      - ${NETWORK}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  service1:
    build:
      context: ./${FIRST_IMAGE}
      dockerfile: Dockerfile
      args:
        GO_IMAGE: ${GO_IMAGE}
        SERVICE: ${FIRST_IMAGE}
        EXECUTABLE: ${FIRST_IMAGE}.bin
        EXECUTABLE_PATH: ${EXECUTABLE_PATH}
    image: ${FIRST_IMAGE}:${FIRST_IMAGE_TAG}
    ports:
      - "${FIRST_IMAGE_HOST_PORT}:${FIRST_IMAGE_CONTAINER_PORT}"
    networks:
      - ${NETWORK}


  service2:
    build:
      context: ./${SECOND_IMAGE}
      dockerfile: Dockerfile
      args:
        GO_IMAGE: ${GO_IMAGE}
        SERVICE: ${SECOND_IMAGE}
        EXECUTABLE: ${SECOND_IMAGE}.bin
        EXECUTABLE_PATH: ${EXECUTABLE_PATH}
    image: ${SECOND_IMAGE}:${SECOND_IMAGE_TAG}
    ports:
      - "${SECOND_IMAGE_HOST_PORT}:${SECOND_IMAGE_CONTAINER_PORT}"
    networks:
      - ${NETWORK}
    environment:
      - service1Url=http://service1:${FIRST_IMAGE_CONTAINER_PORT}/generate/
      - REDIS_HOST=redis-service2
      - REDIS_PORT=${REDIS_CONTAINER_PORT}
    depends_on:
      - service1
      - redis-service2

  # service3:
  #   build:
  #     context: ./3rd
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8082:8082"
  #   networks:
  #     - mynetwork
  #   depends_on:
  #     - service1
  #     - service2

networks:
  mynetwork:
    driver: bridge
